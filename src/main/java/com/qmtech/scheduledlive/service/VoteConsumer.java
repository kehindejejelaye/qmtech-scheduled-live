package com.qmtech.scheduledlive.service;

import com.qmtech.scheduledlive.config.RabbitConfig;
import com.qmtech.scheduledlive.dto.VoteEvent;
import com.qmtech.scheduledlive.entity.Poll;
import com.qmtech.scheduledlive.entity.Vote;
import com.qmtech.scheduledlive.repo.PollRepository;
import com.qmtech.scheduledlive.repo.VoteRepository;
import com.qmtech.scheduledlive.websocket.PollWebSocketHandler;
import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.stereotype.Service;

import java.time.Instant;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;

@Service
public class VoteConsumer {

    private final PollRepository pollRepository;
    private final VoteRepository voteRepository;
    private final PollWebSocketHandler wsHandler;
    private final PollService pollService;

    public VoteConsumer(PollRepository pollRepository,
                        VoteRepository voteRepository,
                        PollWebSocketHandler wsHandler,
                        PollService pollService) {
        this.pollRepository = pollRepository;
        this.voteRepository = voteRepository;
        this.wsHandler = wsHandler;
        this.pollService = pollService;
    }

    /** Consumes messages from RabbitMQ and persists them into the DB. */
    @RabbitListener(queues = RabbitConfig.QUEUE_NAME)
    public void receive(VoteEvent event) {
        if (event.getUsername() == null) {
            return;
        }

        UUID pollId = event.getPollId();
        Optional<Poll> pollOpt = pollRepository.findById(pollId);
        if (pollOpt.isEmpty()) {
            // Poll may have been deleted; safely ignore
            return;
        }

        Poll poll = pollOpt.get();

        // Persist the vote
        Vote vote = new Vote();
        vote.setPoll(poll); // use the entity relationship
        vote.setUsername(event.getUsername());
        vote.setOptionChosen(event.getOption());
        vote.setCreatedAt(Optional.ofNullable(event.getTimestamp()).orElse(Instant.now()));

        voteRepository.save(vote); // ID is generated by JPA

        // Compute tallies and broadcast to WebSocket subscribers
        Map<String, Long> tallies = pollService.computeTallies(pollId);
        wsHandler.broadcastToPoll(pollId, poll, tallies);
    }
}
